@page "/moderator-management"
@attribute [Authorize]
@using System.Security.Claims
@using DTOs.Moderators
@using DTOs.SubForum
@inject Blazor.Services.IModeratorService ModeratorService
@inject Blazor.Services.ISubforumService SubforumService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<h3 class="text-center my-4">Moderator Management</h3>

<div class="container">
    @if (userSubforums == null)
    {
        <p>Loading...</p>
    }
    else if (!userSubforums.Any())
    {
        <div class="alert alert-info mt-3">
            You have not created any subforums yet. Please create a subforum first before managing moderators.
        </div>
    }
    else
    {
        <div class="mb-3">
            <label class="form-label">Select Subforum:</label>
            <InputSelect @bind-Value="selectedSubforumId" class="form-control" @onchange="LoadModerators">
                <option value="">-- Select a Subforum --</option>
                @foreach (var subforum in userSubforums)
                {
                    <option value="@subforum.Id">@subforum.Title</option>
                }
            </InputSelect>
        </div>

        @if (moderators != null)
        {
            <div class="list-group">
                @foreach (var moderator in moderators)
                {
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@moderator.UserId</span>
                        <div>
                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveModerator(moderator.Id)">Remove</button>
                        </div>
                    </div>
                }
            </div>
        }
        else if (selectedSubforumId > 0)
        {
            <p>No moderators found for the selected subforum.</p>
        }

        <div class="mt-3">
            <label class="form-label">Add Moderator by User ID:</label>
            <InputText @bind-Value="newModeratorUserIdString" class="form-control" />
            <button class="btn btn-primary mt-2" @onclick="AddModerator">Add Moderator</button>
        </div>
    }
</div>

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private IEnumerable<ModeratorDTO>? moderators;
    private string? errorMessage;
    private List<SubforumDTO>? userSubforums;
    private int selectedSubforumId;
    private int currentUserId;
    private string newModeratorUserIdString = string.Empty;
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
        {
            return;
        }
        string userIdAsString = claimsPrincipal.FindFirst(c => c.Type == "Id")?.Value;
        if (string.IsNullOrEmpty(userIdAsString))
        {
            errorMessage = "User ID claim not found.";
            return;
        }
        if (int.TryParse(userIdAsString, out int userId))
        {
            currentUserId = userId;
            await LoadUserSubforums();
        }
        else
        {
            errorMessage = "Failed to retrieve user ID.";
        }
    }

    private async Task LoadUserSubforums()
    {
        try
        {
            userSubforums = (await SubforumService.GetSubforumsByUserIdAsync(currentUserId)).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            userSubforums = new List<SubforumDTO>();
        }
    }

    private async Task LoadModerators()
    {
        if (selectedSubforumId > 0)
        {
            try
            {
                moderators = await ModeratorService.GetModeratorsBySubForumIdAsync(selectedSubforumId);
                if (moderators == null || !moderators.Any())
                {
                    errorMessage = "No moderators found for the selected subforum.";
                }
                else
                {
                    errorMessage = null;
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
                moderators = null;
            }
        }
        else
        {
            moderators = null;
        }
    }

    private async Task AddModerator()
    {
        if (int.TryParse(newModeratorUserIdString, out int newModeratorUserId))
        {
            var newModerator = new AddModeratorDTO
            {
                UserId = newModeratorUserId,
                SubForumIds = new List<int> { selectedSubforumId }
            };

            try
            {
                await ModeratorService.AddModeratorAsync(newModerator);
                await LoadModerators(); // Refresh moderators after adding
                newModeratorUserIdString = string.Empty;
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
    }

    private async Task RemoveModerator(int moderatorId)
    {
        try
        {
            await ModeratorService.RemoveModeratorFromSubforumsAsync(moderatorId, new List<int> { selectedSubforumId });
            await LoadModerators(); // Refresh moderators after removal
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}