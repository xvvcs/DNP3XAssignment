@page "/moderator-management"
@attribute [Authorize]
@using DTOs.Moderators
@using DTOs.SubForum
@inject Blazor.Services.IModeratorService ModeratorService
@inject Blazor.Services.ISubforumService SubforumService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<h3 class="text-center my-4">Moderator Management</h3>

<div class="container">
    @if (userSubforums == null)
    {
        <p>Loading...</p>
    }
    else if (!userSubforums.Any())
    {
        <div class="alert alert-info mt-3">
            You have not created any subforums yet. Please create a subforum first before managing moderators.
        </div>
    }
    else
    {
        <div class="mb-3">
            <label class="form-label">Select Subforum:</label>
            <InputSelect @bind-Value="selectedSubforumId" class="form-control" @onchange="LoadModerators">
                <option value="">-- Select a Subforum --</option>
                @foreach (var subforum in userSubforums)
                {
                    <option value="@subforum.Id">@subforum.Title</option>
                }
            </InputSelect>
        </div>

        @if (moderators != null)
        {
            <div class="list-group">
                @foreach (var moderator in moderators)
                {
                    <div class="list-group-item">
                        @if (editingModerator?.Id == moderator.Id)
                        {
                            <EditForm Model="editingModerator" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" />

                                <div class="mb-3">
                                    <label class="form-label">Username:</label>
                                    <InputText @bind-Value="editingModeratorUserIdString" class="form-control" />
                                </div>

                                <button type="submit" class="btn btn-primary me-2">Update Moderator</button>
                                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                            </EditForm>
                        }
                        else
                        {
                            <div class="d-flex justify-content-between align-items-center">
                                <span>@moderator.UserId</span>
                                <div>
                                    <button class="btn btn-sm btn-warning me-2" @onclick="() => EditModerator(moderator)">Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteModerator(moderator.Id)">Delete</button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
        else if (selectedSubforumId > 0)
        {
            <p>No moderators found for the selected subforum.</p>
        }
    }
</div>

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private IEnumerable<ModeratorDTO>? moderators;
    private ModeratorDTO? editingModerator;
    private string? errorMessage;
    private List<SubforumDTO>? userSubforums;
    private int selectedSubforumId;
    private int currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            currentUserId = int.Parse(user.FindFirst("Id").Value);
            await LoadUserSubforums();
        }
    }

    private async Task LoadUserSubforums()
    {
        try
        {
            userSubforums = (await SubforumService.GetSubforumsByUserIdAsync(currentUserId)).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            userSubforums = new List<SubforumDTO>();
        }
    }

    private async Task LoadModerators(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out selectedSubforumId) && selectedSubforumId > 0)
        {
            try
            {
                moderators = await ModeratorService.GetModeratorsBySubForumIdAsync(selectedSubforumId);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
                moderators = null;
            }
        }
        else
        {
            moderators = null;
        }
    }

    private void EditModerator(ModeratorDTO moderator)
    {
        editingModerator = new ModeratorDTO()
        {
            UserId = moderator.UserId,
            Id = moderator.Id,
            Subforums = moderator.Subforums.ToList() // Copy existing subforums
        };
        editingModeratorUserIdString = moderator.UserId.ToString();
    }

    private void CancelEdit()
    {
        editingModerator = null;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            editingModerator.UserId = int.Parse(editingModeratorUserIdString);
            await ModeratorService.UpdateModeratorAsync(editingModerator!);
            await LoadModerators(new ChangeEventArgs { Value = selectedSubforumId.ToString() }); // Refresh moderators after update
            editingModerator = null;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DeleteModerator(int id)
    {
        try
        {
            await ModeratorService.DeleteModeratorAsync(id);
            await LoadModerators(new ChangeEventArgs { Value = selectedSubforumId.ToString() }); // Refresh moderators after deletion
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private string editingModeratorUserIdString;
}