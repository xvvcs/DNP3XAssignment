@page "/post-management"
@using DTOs.Posts
@inject Blazor.Services.IPostService PostService
@inject NavigationManager Navigation

<h3 class="text-center my-4">Post Management</h3>

<div class="container">
    @if (posts == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="list-group">
            @foreach (var post in posts)
            {
                <div class="list-group-item">
                    @if (editingPost?.Id == post.Id)
                    {
                        <EditForm Model="editingPost" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" />

                            <div class="mb-3">
                                <label class="form-label">Title:</label>
                                <InputText @bind-Value="editingPost.Title" class="form-control" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Content:</label>
                                <InputTextArea @bind-Value="editingPost.Body" class="form-control" rows="5" />
                            </div>
                            <button type="submit" class="btn btn-primary me-2">Update Post</button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </EditForm>
                    }
                    else
                    {
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h5>@post.Title</h5>
                                <p>@post.Body</p>
                                <p class="text-muted">Posted by: @post.UserId</p>
                            </div>
                            <div>
                                <button class="btn btn-sm btn-warning me-2" @onclick="() => EditPost(post)">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeletePost(post.Id)">Delete</button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private IEnumerable<PostDTO>? posts;
    private PostDTO? editingPost;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        posts = await PostService.GetPostsAsync();
    }

    private void EditPost(PostDTO post)
    {
        editingPost = new PostDTO()
        {
            Id = post.Id,
            Title = post.Title,
            Body = post.Body,
            UserId = post.UserId,
        };
    }

    private void CancelEdit()
    {
        editingPost = null;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await PostService.UpdatePostAsync(editingPost!);
            posts = await PostService.GetPostsAsync();
            editingPost = null;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DeletePost(int id)
    {
        try
        {
            await PostService.DeletePostAsync(id);
            posts = await PostService.GetPostsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}