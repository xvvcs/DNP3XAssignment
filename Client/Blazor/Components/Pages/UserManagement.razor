@page "/users"
@using DTOs.Posts
@inject Blazor.Services.IUserService UserService
@inject NavigationManager Navigation

<h3 class="text-center my-4">User Management</h3>

<div class="container">
    @if (users == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="list-group">
            @foreach (var user in users)
            {
                <div class="list-group-item">
                    @if (editingUser?.Id == user.Id)
                    {
                        <EditForm Model="editingUser" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" />

                            <div class="mb-3">
                                <label class="form-label">Username:</label>
                                <InputText @bind-Value="editingUser.Username" class="form-control" />
                            </div>
                            <button type="submit" class="btn btn-primary me-2">Update User</button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </EditForm>
                    }
                    else
                    {
                        <div class="d-flex justify-content-between align-items-center">
                            <span>@user.Username</span>
                            <div>
                                <button class="btn btn-sm btn-warning me-2" @onclick="() => EditUser(user)">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.Id)">Delete</button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private IEnumerable<UserDTO>? users;
    private UserDTO? editingUser;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetUsersAsync();
    }

    private void EditUser(UserDTO user)
    {
        editingUser = new UserDTO()
        {
            Username = user.Username,
            Id = user.Id
        };
    }

    private void CancelEdit()
    {
        editingUser = null;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await UserService.UpdateUserAsync(editingUser!);
            users = await UserService.GetUsersAsync();
            editingUser = null;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DeleteUser(int id)
    {
        try
        {
            await UserService.DeleteUserAsync(id);
            users = await UserService.GetUsersAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}