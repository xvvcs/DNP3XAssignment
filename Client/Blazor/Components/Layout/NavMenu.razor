@using Blazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Home</a>
        @if (isLoggedIn)
        {
            <NavLink class="nav-link text-light" href="" @onclick="Logout">
                <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout
            </NavLink>
        }
        else
        {
            <NavLink class="nav-link text-light" href="login">
                <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login
            </NavLink>
        }
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler"/>

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="posts" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> All Posts
            </NavLink>

            <div class="nav-item px-3">
                <NavLink href="/subforums" class="nav-link" Match="NavLinkMatch.All">Subforums</NavLink>
                <NavLink href="/subforum-management" class="nav-link" Match="NavLinkMatch.All">Subforum Management</NavLink>
            </div>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="add-user">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Add User
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="users">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> User Management
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="add-moderator">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Add Moderator
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="moderator-management">
                <span class="bi bi-pencil-square-nav-menu" aria-hidden="true"></span> Moderator Management
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="create-post">
                <span class="bi bi-pencil-square-nav-menu" aria-hidden="true"></span> Create Post
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="post-management">
                <span class="bi bi-pencil-square-nav-menu" aria-hidden="true"></span> Post Management
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link text-light" href="register">
                <span class="bi bi-person-plus" aria-hidden="true"></span> Register
            </NavLink>
        </div>
    </nav>
</div>

@if (!string.IsNullOrEmpty(notificationMessage))
{
    <div class="alert @notificationClass mt-3">@notificationMessage</div>
}

@code {
    private bool isLoggedIn;
    private string notificationMessage = "";
    private string notificationClass = "";

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await UpdateLoginState();
    }

    private async Task UpdateLoginState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isLoggedIn = authState.User.Identity != null && authState.User.Identity.IsAuthenticated;
        StateHasChanged();
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        InvokeAsync(async () =>
        {
            await UpdateLoginState();
            notificationMessage = isLoggedIn ? "Successfully logged in!" : "Logged out.";
            notificationClass = isLoggedIn ? "alert-success" : "alert-info";
        });
    }

    private void Logout()
    {
        ((AuthProvider)AuthenticationStateProvider).Logout();
        NavigationManager.NavigateTo("/");
        notificationMessage = "Successfully logged out.";
        notificationClass = "alert-info";
        isLoggedIn = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}